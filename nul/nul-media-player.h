/*
 * Generated by gdbus-codegen 2.40.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __NUL_MEDIA_PLAYER_H__
#define __NUL_MEDIA_PLAYER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.mpris.MediaPlayer2.Player */

#define NUL_TYPE_NUL_MEDIA_PLAYER (nul_nul_media_player_get_type ())
#define NUL_NUL_MEDIA_PLAYER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NUL_TYPE_NUL_MEDIA_PLAYER, NulNulMediaPlayer))
#define NUL_IS_NUL_MEDIA_PLAYER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NUL_TYPE_NUL_MEDIA_PLAYER))
#define NUL_NUL_MEDIA_PLAYER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NUL_TYPE_NUL_MEDIA_PLAYER, NulNulMediaPlayerIface))

struct _NulNulMediaPlayer;
typedef struct _NulNulMediaPlayer NulNulMediaPlayer;
typedef struct _NulNulMediaPlayerIface NulNulMediaPlayerIface;

struct _NulNulMediaPlayerIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_next) (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_open_uri) (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_Uri);

  gboolean (*handle_pause) (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_play) (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_play_pause) (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_previous) (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_seek) (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_Offset);

  gboolean (*handle_set_position) (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_TrackId,
    gint64 arg_Position);

  gboolean (*handle_stop) (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_can_control) (NulNulMediaPlayer *object);

  gboolean  (*get_can_go_next) (NulNulMediaPlayer *object);

  gboolean  (*get_can_go_previous) (NulNulMediaPlayer *object);

  gboolean  (*get_can_pause) (NulNulMediaPlayer *object);

  gboolean  (*get_can_play) (NulNulMediaPlayer *object);

  gboolean  (*get_can_seek) (NulNulMediaPlayer *object);

  const gchar * (*get_loop_status) (NulNulMediaPlayer *object);

  gdouble  (*get_maximum_rate) (NulNulMediaPlayer *object);

  GVariant * (*get_metadata) (NulNulMediaPlayer *object);

  gdouble  (*get_minimum_rate) (NulNulMediaPlayer *object);

  const gchar * (*get_playback_status) (NulNulMediaPlayer *object);

  gint64  (*get_position) (NulNulMediaPlayer *object);

  gdouble  (*get_rate) (NulNulMediaPlayer *object);

  gboolean  (*get_shuffle) (NulNulMediaPlayer *object);

  gdouble  (*get_volume) (NulNulMediaPlayer *object);

  void (*seeked) (
    NulNulMediaPlayer *object,
    gint64 arg_Position);

};

GType nul_nul_media_player_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nul_nul_media_player_interface_info (void);
guint nul_nul_media_player_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void nul_nul_media_player_complete_next (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);

void nul_nul_media_player_complete_previous (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);

void nul_nul_media_player_complete_pause (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);

void nul_nul_media_player_complete_play_pause (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);

void nul_nul_media_player_complete_stop (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);

void nul_nul_media_player_complete_play (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);

void nul_nul_media_player_complete_seek (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);

void nul_nul_media_player_complete_set_position (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);

void nul_nul_media_player_complete_open_uri (
    NulNulMediaPlayer *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void nul_nul_media_player_emit_seeked (
    NulNulMediaPlayer *object,
    gint64 arg_Position);



/* D-Bus method calls: */
void nul_nul_media_player_call_next (
    NulNulMediaPlayer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_nul_media_player_call_next_finish (
    NulNulMediaPlayer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_nul_media_player_call_next_sync (
    NulNulMediaPlayer *proxy,
    GCancellable *cancellable,
    GError **error);

void nul_nul_media_player_call_previous (
    NulNulMediaPlayer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_nul_media_player_call_previous_finish (
    NulNulMediaPlayer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_nul_media_player_call_previous_sync (
    NulNulMediaPlayer *proxy,
    GCancellable *cancellable,
    GError **error);

void nul_nul_media_player_call_pause (
    NulNulMediaPlayer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_nul_media_player_call_pause_finish (
    NulNulMediaPlayer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_nul_media_player_call_pause_sync (
    NulNulMediaPlayer *proxy,
    GCancellable *cancellable,
    GError **error);

void nul_nul_media_player_call_play_pause (
    NulNulMediaPlayer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_nul_media_player_call_play_pause_finish (
    NulNulMediaPlayer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_nul_media_player_call_play_pause_sync (
    NulNulMediaPlayer *proxy,
    GCancellable *cancellable,
    GError **error);

void nul_nul_media_player_call_stop (
    NulNulMediaPlayer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_nul_media_player_call_stop_finish (
    NulNulMediaPlayer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_nul_media_player_call_stop_sync (
    NulNulMediaPlayer *proxy,
    GCancellable *cancellable,
    GError **error);

void nul_nul_media_player_call_play (
    NulNulMediaPlayer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_nul_media_player_call_play_finish (
    NulNulMediaPlayer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_nul_media_player_call_play_sync (
    NulNulMediaPlayer *proxy,
    GCancellable *cancellable,
    GError **error);

void nul_nul_media_player_call_seek (
    NulNulMediaPlayer *proxy,
    gint64 arg_Offset,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_nul_media_player_call_seek_finish (
    NulNulMediaPlayer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_nul_media_player_call_seek_sync (
    NulNulMediaPlayer *proxy,
    gint64 arg_Offset,
    GCancellable *cancellable,
    GError **error);

void nul_nul_media_player_call_set_position (
    NulNulMediaPlayer *proxy,
    const gchar *arg_TrackId,
    gint64 arg_Position,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_nul_media_player_call_set_position_finish (
    NulNulMediaPlayer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_nul_media_player_call_set_position_sync (
    NulNulMediaPlayer *proxy,
    const gchar *arg_TrackId,
    gint64 arg_Position,
    GCancellable *cancellable,
    GError **error);

void nul_nul_media_player_call_open_uri (
    NulNulMediaPlayer *proxy,
    const gchar *arg_Uri,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_nul_media_player_call_open_uri_finish (
    NulNulMediaPlayer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_nul_media_player_call_open_uri_sync (
    NulNulMediaPlayer *proxy,
    const gchar *arg_Uri,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *nul_nul_media_player_get_playback_status (NulNulMediaPlayer *object);
gchar *nul_nul_media_player_dup_playback_status (NulNulMediaPlayer *object);
void nul_nul_media_player_set_playback_status (NulNulMediaPlayer *object, const gchar *value);

const gchar *nul_nul_media_player_get_loop_status (NulNulMediaPlayer *object);
gchar *nul_nul_media_player_dup_loop_status (NulNulMediaPlayer *object);
void nul_nul_media_player_set_loop_status (NulNulMediaPlayer *object, const gchar *value);

gdouble nul_nul_media_player_get_rate (NulNulMediaPlayer *object);
void nul_nul_media_player_set_rate (NulNulMediaPlayer *object, gdouble value);

gboolean nul_nul_media_player_get_shuffle (NulNulMediaPlayer *object);
void nul_nul_media_player_set_shuffle (NulNulMediaPlayer *object, gboolean value);

GVariant *nul_nul_media_player_get_metadata (NulNulMediaPlayer *object);
GVariant *nul_nul_media_player_dup_metadata (NulNulMediaPlayer *object);
void nul_nul_media_player_set_metadata (NulNulMediaPlayer *object, GVariant *value);

gdouble nul_nul_media_player_get_volume (NulNulMediaPlayer *object);
void nul_nul_media_player_set_volume (NulNulMediaPlayer *object, gdouble value);

gint64 nul_nul_media_player_get_position (NulNulMediaPlayer *object);
void nul_nul_media_player_set_position (NulNulMediaPlayer *object, gint64 value);

gdouble nul_nul_media_player_get_minimum_rate (NulNulMediaPlayer *object);
void nul_nul_media_player_set_minimum_rate (NulNulMediaPlayer *object, gdouble value);

gdouble nul_nul_media_player_get_maximum_rate (NulNulMediaPlayer *object);
void nul_nul_media_player_set_maximum_rate (NulNulMediaPlayer *object, gdouble value);

gboolean nul_nul_media_player_get_can_go_next (NulNulMediaPlayer *object);
void nul_nul_media_player_set_can_go_next (NulNulMediaPlayer *object, gboolean value);

gboolean nul_nul_media_player_get_can_go_previous (NulNulMediaPlayer *object);
void nul_nul_media_player_set_can_go_previous (NulNulMediaPlayer *object, gboolean value);

gboolean nul_nul_media_player_get_can_play (NulNulMediaPlayer *object);
void nul_nul_media_player_set_can_play (NulNulMediaPlayer *object, gboolean value);

gboolean nul_nul_media_player_get_can_pause (NulNulMediaPlayer *object);
void nul_nul_media_player_set_can_pause (NulNulMediaPlayer *object, gboolean value);

gboolean nul_nul_media_player_get_can_seek (NulNulMediaPlayer *object);
void nul_nul_media_player_set_can_seek (NulNulMediaPlayer *object, gboolean value);

gboolean nul_nul_media_player_get_can_control (NulNulMediaPlayer *object);
void nul_nul_media_player_set_can_control (NulNulMediaPlayer *object, gboolean value);


/* ---- */

#define NUL_TYPE_NUL_MEDIA_PLAYER_PROXY (nul_nul_media_player_proxy_get_type ())
#define NUL_NUL_MEDIA_PLAYER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NUL_TYPE_NUL_MEDIA_PLAYER_PROXY, NulNulMediaPlayerProxy))
#define NUL_NUL_MEDIA_PLAYER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NUL_TYPE_NUL_MEDIA_PLAYER_PROXY, NulNulMediaPlayerProxyClass))
#define NUL_NUL_MEDIA_PLAYER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NUL_TYPE_NUL_MEDIA_PLAYER_PROXY, NulNulMediaPlayerProxyClass))
#define NUL_IS_NUL_MEDIA_PLAYER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NUL_TYPE_NUL_MEDIA_PLAYER_PROXY))
#define NUL_IS_NUL_MEDIA_PLAYER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NUL_TYPE_NUL_MEDIA_PLAYER_PROXY))

typedef struct _NulNulMediaPlayerProxy NulNulMediaPlayerProxy;
typedef struct _NulNulMediaPlayerProxyClass NulNulMediaPlayerProxyClass;
typedef struct _NulNulMediaPlayerProxyPrivate NulNulMediaPlayerProxyPrivate;

struct _NulNulMediaPlayerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NulNulMediaPlayerProxyPrivate *priv;
};

struct _NulNulMediaPlayerProxyClass
{
  GDBusProxyClass parent_class;
};

GType nul_nul_media_player_proxy_get_type (void) G_GNUC_CONST;

void nul_nul_media_player_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NulNulMediaPlayer *nul_nul_media_player_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NulNulMediaPlayer *nul_nul_media_player_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nul_nul_media_player_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NulNulMediaPlayer *nul_nul_media_player_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NulNulMediaPlayer *nul_nul_media_player_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NUL_TYPE_NUL_MEDIA_PLAYER_SKELETON (nul_nul_media_player_skeleton_get_type ())
#define NUL_NUL_MEDIA_PLAYER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NUL_TYPE_NUL_MEDIA_PLAYER_SKELETON, NulNulMediaPlayerSkeleton))
#define NUL_NUL_MEDIA_PLAYER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NUL_TYPE_NUL_MEDIA_PLAYER_SKELETON, NulNulMediaPlayerSkeletonClass))
#define NUL_NUL_MEDIA_PLAYER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NUL_TYPE_NUL_MEDIA_PLAYER_SKELETON, NulNulMediaPlayerSkeletonClass))
#define NUL_IS_NUL_MEDIA_PLAYER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NUL_TYPE_NUL_MEDIA_PLAYER_SKELETON))
#define NUL_IS_NUL_MEDIA_PLAYER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NUL_TYPE_NUL_MEDIA_PLAYER_SKELETON))

typedef struct _NulNulMediaPlayerSkeleton NulNulMediaPlayerSkeleton;
typedef struct _NulNulMediaPlayerSkeletonClass NulNulMediaPlayerSkeletonClass;
typedef struct _NulNulMediaPlayerSkeletonPrivate NulNulMediaPlayerSkeletonPrivate;

struct _NulNulMediaPlayerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NulNulMediaPlayerSkeletonPrivate *priv;
};

struct _NulNulMediaPlayerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nul_nul_media_player_skeleton_get_type (void) G_GNUC_CONST;

NulNulMediaPlayer *nul_nul_media_player_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.mpris.MediaPlayer2.Playlists */

#define NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS (nul_org_mpris_media_player2_playlists_get_type ())
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS, NulOrgMprisMediaPlayer2Playlists))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS, NulOrgMprisMediaPlayer2PlaylistsIface))

struct _NulOrgMprisMediaPlayer2Playlists;
typedef struct _NulOrgMprisMediaPlayer2Playlists NulOrgMprisMediaPlayer2Playlists;
typedef struct _NulOrgMprisMediaPlayer2PlaylistsIface NulOrgMprisMediaPlayer2PlaylistsIface;

struct _NulOrgMprisMediaPlayer2PlaylistsIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_activate_playlist) (
    NulOrgMprisMediaPlayer2Playlists *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_PlaylistId);

  gboolean (*handle_get_playlists) (
    NulOrgMprisMediaPlayer2Playlists *object,
    GDBusMethodInvocation *invocation,
    guint arg_Index,
    guint arg_MaxCount,
    const gchar *arg_Order,
    gboolean arg_ReverseOrder);

  GVariant * (*get_active_playlist) (NulOrgMprisMediaPlayer2Playlists *object);

  const gchar *const * (*get_orderings) (NulOrgMprisMediaPlayer2Playlists *object);

  guint  (*get_playlist_count) (NulOrgMprisMediaPlayer2Playlists *object);

  void (*playlist_changed) (
    NulOrgMprisMediaPlayer2Playlists *object,
    GVariant *arg_Playlist);

};

GType nul_org_mpris_media_player2_playlists_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nul_org_mpris_media_player2_playlists_interface_info (void);
guint nul_org_mpris_media_player2_playlists_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void nul_org_mpris_media_player2_playlists_complete_activate_playlist (
    NulOrgMprisMediaPlayer2Playlists *object,
    GDBusMethodInvocation *invocation);

void nul_org_mpris_media_player2_playlists_complete_get_playlists (
    NulOrgMprisMediaPlayer2Playlists *object,
    GDBusMethodInvocation *invocation,
    GVariant *Playlists);



/* D-Bus signal emissions functions: */
void nul_org_mpris_media_player2_playlists_emit_playlist_changed (
    NulOrgMprisMediaPlayer2Playlists *object,
    GVariant *arg_Playlist);



/* D-Bus method calls: */
void nul_org_mpris_media_player2_playlists_call_activate_playlist (
    NulOrgMprisMediaPlayer2Playlists *proxy,
    const gchar *arg_PlaylistId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_org_mpris_media_player2_playlists_call_activate_playlist_finish (
    NulOrgMprisMediaPlayer2Playlists *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_org_mpris_media_player2_playlists_call_activate_playlist_sync (
    NulOrgMprisMediaPlayer2Playlists *proxy,
    const gchar *arg_PlaylistId,
    GCancellable *cancellable,
    GError **error);

void nul_org_mpris_media_player2_playlists_call_get_playlists (
    NulOrgMprisMediaPlayer2Playlists *proxy,
    guint arg_Index,
    guint arg_MaxCount,
    const gchar *arg_Order,
    gboolean arg_ReverseOrder,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_org_mpris_media_player2_playlists_call_get_playlists_finish (
    NulOrgMprisMediaPlayer2Playlists *proxy,
    GVariant **out_Playlists,
    GAsyncResult *res,
    GError **error);

gboolean nul_org_mpris_media_player2_playlists_call_get_playlists_sync (
    NulOrgMprisMediaPlayer2Playlists *proxy,
    guint arg_Index,
    guint arg_MaxCount,
    const gchar *arg_Order,
    gboolean arg_ReverseOrder,
    GVariant **out_Playlists,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint nul_org_mpris_media_player2_playlists_get_playlist_count (NulOrgMprisMediaPlayer2Playlists *object);
void nul_org_mpris_media_player2_playlists_set_playlist_count (NulOrgMprisMediaPlayer2Playlists *object, guint value);

const gchar *const *nul_org_mpris_media_player2_playlists_get_orderings (NulOrgMprisMediaPlayer2Playlists *object);
gchar **nul_org_mpris_media_player2_playlists_dup_orderings (NulOrgMprisMediaPlayer2Playlists *object);
void nul_org_mpris_media_player2_playlists_set_orderings (NulOrgMprisMediaPlayer2Playlists *object, const gchar *const *value);

GVariant *nul_org_mpris_media_player2_playlists_get_active_playlist (NulOrgMprisMediaPlayer2Playlists *object);
GVariant *nul_org_mpris_media_player2_playlists_dup_active_playlist (NulOrgMprisMediaPlayer2Playlists *object);
void nul_org_mpris_media_player2_playlists_set_active_playlist (NulOrgMprisMediaPlayer2Playlists *object, GVariant *value);


/* ---- */

#define NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_PROXY (nul_org_mpris_media_player2_playlists_proxy_get_type ())
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_PROXY, NulOrgMprisMediaPlayer2PlaylistsProxy))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_PROXY, NulOrgMprisMediaPlayer2PlaylistsProxyClass))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_PROXY, NulOrgMprisMediaPlayer2PlaylistsProxyClass))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_PROXY))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_PROXY))

typedef struct _NulOrgMprisMediaPlayer2PlaylistsProxy NulOrgMprisMediaPlayer2PlaylistsProxy;
typedef struct _NulOrgMprisMediaPlayer2PlaylistsProxyClass NulOrgMprisMediaPlayer2PlaylistsProxyClass;
typedef struct _NulOrgMprisMediaPlayer2PlaylistsProxyPrivate NulOrgMprisMediaPlayer2PlaylistsProxyPrivate;

struct _NulOrgMprisMediaPlayer2PlaylistsProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NulOrgMprisMediaPlayer2PlaylistsProxyPrivate *priv;
};

struct _NulOrgMprisMediaPlayer2PlaylistsProxyClass
{
  GDBusProxyClass parent_class;
};

GType nul_org_mpris_media_player2_playlists_proxy_get_type (void) G_GNUC_CONST;

void nul_org_mpris_media_player2_playlists_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NulOrgMprisMediaPlayer2Playlists *nul_org_mpris_media_player2_playlists_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NulOrgMprisMediaPlayer2Playlists *nul_org_mpris_media_player2_playlists_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nul_org_mpris_media_player2_playlists_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NulOrgMprisMediaPlayer2Playlists *nul_org_mpris_media_player2_playlists_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NulOrgMprisMediaPlayer2Playlists *nul_org_mpris_media_player2_playlists_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_SKELETON (nul_org_mpris_media_player2_playlists_skeleton_get_type ())
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_SKELETON, NulOrgMprisMediaPlayer2PlaylistsSkeleton))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_SKELETON, NulOrgMprisMediaPlayer2PlaylistsSkeletonClass))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_SKELETON, NulOrgMprisMediaPlayer2PlaylistsSkeletonClass))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_SKELETON))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PLAYLISTS_SKELETON))

typedef struct _NulOrgMprisMediaPlayer2PlaylistsSkeleton NulOrgMprisMediaPlayer2PlaylistsSkeleton;
typedef struct _NulOrgMprisMediaPlayer2PlaylistsSkeletonClass NulOrgMprisMediaPlayer2PlaylistsSkeletonClass;
typedef struct _NulOrgMprisMediaPlayer2PlaylistsSkeletonPrivate NulOrgMprisMediaPlayer2PlaylistsSkeletonPrivate;

struct _NulOrgMprisMediaPlayer2PlaylistsSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NulOrgMprisMediaPlayer2PlaylistsSkeletonPrivate *priv;
};

struct _NulOrgMprisMediaPlayer2PlaylistsSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nul_org_mpris_media_player2_playlists_skeleton_get_type (void) G_GNUC_CONST;

NulOrgMprisMediaPlayer2Playlists *nul_org_mpris_media_player2_playlists_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.mpris.MediaPlayer2.TrackList */

#define NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST (nul_org_mpris_media_player2_track_list_get_type ())
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST, NulOrgMprisMediaPlayer2TrackList))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST, NulOrgMprisMediaPlayer2TrackListIface))

struct _NulOrgMprisMediaPlayer2TrackList;
typedef struct _NulOrgMprisMediaPlayer2TrackList NulOrgMprisMediaPlayer2TrackList;
typedef struct _NulOrgMprisMediaPlayer2TrackListIface NulOrgMprisMediaPlayer2TrackListIface;

struct _NulOrgMprisMediaPlayer2TrackListIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_add_track) (
    NulOrgMprisMediaPlayer2TrackList *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_Uri,
    const gchar *arg_AfterTrack,
    gboolean arg_SetAsCurrent);

  gboolean (*handle_get_tracks_metadata) (
    NulOrgMprisMediaPlayer2TrackList *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_TrackIds);

  gboolean (*handle_go_to) (
    NulOrgMprisMediaPlayer2TrackList *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_TrackId);

  gboolean (*handle_remove_track) (
    NulOrgMprisMediaPlayer2TrackList *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_TrackId);

  gboolean  (*get_can_edit_tracks) (NulOrgMprisMediaPlayer2TrackList *object);

  const gchar *const * (*get_tracks) (NulOrgMprisMediaPlayer2TrackList *object);

  void (*track_added) (
    NulOrgMprisMediaPlayer2TrackList *object,
    GVariant *arg_Metadata,
    const gchar *arg_AfterTrack);

  void (*track_list_replaced) (
    NulOrgMprisMediaPlayer2TrackList *object,
    const gchar *const *arg_Tracks,
    const gchar *arg_CurrentTrack);

  void (*track_metadata_changed) (
    NulOrgMprisMediaPlayer2TrackList *object,
    const gchar *arg_TrackId,
    GVariant *arg_Metadata);

  void (*track_removed) (
    NulOrgMprisMediaPlayer2TrackList *object,
    const gchar *arg_TrackId);

};

GType nul_org_mpris_media_player2_track_list_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nul_org_mpris_media_player2_track_list_interface_info (void);
guint nul_org_mpris_media_player2_track_list_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void nul_org_mpris_media_player2_track_list_complete_get_tracks_metadata (
    NulOrgMprisMediaPlayer2TrackList *object,
    GDBusMethodInvocation *invocation,
    GVariant *Metadata);

void nul_org_mpris_media_player2_track_list_complete_add_track (
    NulOrgMprisMediaPlayer2TrackList *object,
    GDBusMethodInvocation *invocation);

void nul_org_mpris_media_player2_track_list_complete_remove_track (
    NulOrgMprisMediaPlayer2TrackList *object,
    GDBusMethodInvocation *invocation);

void nul_org_mpris_media_player2_track_list_complete_go_to (
    NulOrgMprisMediaPlayer2TrackList *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void nul_org_mpris_media_player2_track_list_emit_track_list_replaced (
    NulOrgMprisMediaPlayer2TrackList *object,
    const gchar *const *arg_Tracks,
    const gchar *arg_CurrentTrack);

void nul_org_mpris_media_player2_track_list_emit_track_added (
    NulOrgMprisMediaPlayer2TrackList *object,
    GVariant *arg_Metadata,
    const gchar *arg_AfterTrack);

void nul_org_mpris_media_player2_track_list_emit_track_removed (
    NulOrgMprisMediaPlayer2TrackList *object,
    const gchar *arg_TrackId);

void nul_org_mpris_media_player2_track_list_emit_track_metadata_changed (
    NulOrgMprisMediaPlayer2TrackList *object,
    const gchar *arg_TrackId,
    GVariant *arg_Metadata);



/* D-Bus method calls: */
void nul_org_mpris_media_player2_track_list_call_get_tracks_metadata (
    NulOrgMprisMediaPlayer2TrackList *proxy,
    const gchar *const *arg_TrackIds,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_org_mpris_media_player2_track_list_call_get_tracks_metadata_finish (
    NulOrgMprisMediaPlayer2TrackList *proxy,
    GVariant **out_Metadata,
    GAsyncResult *res,
    GError **error);

gboolean nul_org_mpris_media_player2_track_list_call_get_tracks_metadata_sync (
    NulOrgMprisMediaPlayer2TrackList *proxy,
    const gchar *const *arg_TrackIds,
    GVariant **out_Metadata,
    GCancellable *cancellable,
    GError **error);

void nul_org_mpris_media_player2_track_list_call_add_track (
    NulOrgMprisMediaPlayer2TrackList *proxy,
    const gchar *arg_Uri,
    const gchar *arg_AfterTrack,
    gboolean arg_SetAsCurrent,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_org_mpris_media_player2_track_list_call_add_track_finish (
    NulOrgMprisMediaPlayer2TrackList *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_org_mpris_media_player2_track_list_call_add_track_sync (
    NulOrgMprisMediaPlayer2TrackList *proxy,
    const gchar *arg_Uri,
    const gchar *arg_AfterTrack,
    gboolean arg_SetAsCurrent,
    GCancellable *cancellable,
    GError **error);

void nul_org_mpris_media_player2_track_list_call_remove_track (
    NulOrgMprisMediaPlayer2TrackList *proxy,
    const gchar *arg_TrackId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_org_mpris_media_player2_track_list_call_remove_track_finish (
    NulOrgMprisMediaPlayer2TrackList *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_org_mpris_media_player2_track_list_call_remove_track_sync (
    NulOrgMprisMediaPlayer2TrackList *proxy,
    const gchar *arg_TrackId,
    GCancellable *cancellable,
    GError **error);

void nul_org_mpris_media_player2_track_list_call_go_to (
    NulOrgMprisMediaPlayer2TrackList *proxy,
    const gchar *arg_TrackId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_org_mpris_media_player2_track_list_call_go_to_finish (
    NulOrgMprisMediaPlayer2TrackList *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_org_mpris_media_player2_track_list_call_go_to_sync (
    NulOrgMprisMediaPlayer2TrackList *proxy,
    const gchar *arg_TrackId,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *const *nul_org_mpris_media_player2_track_list_get_tracks (NulOrgMprisMediaPlayer2TrackList *object);
gchar **nul_org_mpris_media_player2_track_list_dup_tracks (NulOrgMprisMediaPlayer2TrackList *object);
void nul_org_mpris_media_player2_track_list_set_tracks (NulOrgMprisMediaPlayer2TrackList *object, const gchar *const *value);

gboolean nul_org_mpris_media_player2_track_list_get_can_edit_tracks (NulOrgMprisMediaPlayer2TrackList *object);
void nul_org_mpris_media_player2_track_list_set_can_edit_tracks (NulOrgMprisMediaPlayer2TrackList *object, gboolean value);


/* ---- */

#define NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_PROXY (nul_org_mpris_media_player2_track_list_proxy_get_type ())
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_PROXY, NulOrgMprisMediaPlayer2TrackListProxy))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_PROXY, NulOrgMprisMediaPlayer2TrackListProxyClass))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_PROXY, NulOrgMprisMediaPlayer2TrackListProxyClass))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_PROXY))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_PROXY))

typedef struct _NulOrgMprisMediaPlayer2TrackListProxy NulOrgMprisMediaPlayer2TrackListProxy;
typedef struct _NulOrgMprisMediaPlayer2TrackListProxyClass NulOrgMprisMediaPlayer2TrackListProxyClass;
typedef struct _NulOrgMprisMediaPlayer2TrackListProxyPrivate NulOrgMprisMediaPlayer2TrackListProxyPrivate;

struct _NulOrgMprisMediaPlayer2TrackListProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NulOrgMprisMediaPlayer2TrackListProxyPrivate *priv;
};

struct _NulOrgMprisMediaPlayer2TrackListProxyClass
{
  GDBusProxyClass parent_class;
};

GType nul_org_mpris_media_player2_track_list_proxy_get_type (void) G_GNUC_CONST;

void nul_org_mpris_media_player2_track_list_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NulOrgMprisMediaPlayer2TrackList *nul_org_mpris_media_player2_track_list_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NulOrgMprisMediaPlayer2TrackList *nul_org_mpris_media_player2_track_list_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nul_org_mpris_media_player2_track_list_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NulOrgMprisMediaPlayer2TrackList *nul_org_mpris_media_player2_track_list_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NulOrgMprisMediaPlayer2TrackList *nul_org_mpris_media_player2_track_list_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_SKELETON (nul_org_mpris_media_player2_track_list_skeleton_get_type ())
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_SKELETON, NulOrgMprisMediaPlayer2TrackListSkeleton))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_SKELETON, NulOrgMprisMediaPlayer2TrackListSkeletonClass))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_SKELETON, NulOrgMprisMediaPlayer2TrackListSkeletonClass))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_SKELETON))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_TRACK_LIST_SKELETON))

typedef struct _NulOrgMprisMediaPlayer2TrackListSkeleton NulOrgMprisMediaPlayer2TrackListSkeleton;
typedef struct _NulOrgMprisMediaPlayer2TrackListSkeletonClass NulOrgMprisMediaPlayer2TrackListSkeletonClass;
typedef struct _NulOrgMprisMediaPlayer2TrackListSkeletonPrivate NulOrgMprisMediaPlayer2TrackListSkeletonPrivate;

struct _NulOrgMprisMediaPlayer2TrackListSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NulOrgMprisMediaPlayer2TrackListSkeletonPrivate *priv;
};

struct _NulOrgMprisMediaPlayer2TrackListSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nul_org_mpris_media_player2_track_list_skeleton_get_type (void) G_GNUC_CONST;

NulOrgMprisMediaPlayer2TrackList *nul_org_mpris_media_player2_track_list_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.mpris.MediaPlayer2 */

#define NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2 (nul_org_mpris_media_player2_get_type ())
#define NUL_ORG_MPRIS_MEDIA_PLAYER2(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2, NulOrgMprisMediaPlayer2))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2, NulOrgMprisMediaPlayer2Iface))

struct _NulOrgMprisMediaPlayer2;
typedef struct _NulOrgMprisMediaPlayer2 NulOrgMprisMediaPlayer2;
typedef struct _NulOrgMprisMediaPlayer2Iface NulOrgMprisMediaPlayer2Iface;

struct _NulOrgMprisMediaPlayer2Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_quit) (
    NulOrgMprisMediaPlayer2 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_raise) (
    NulOrgMprisMediaPlayer2 *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_can_quit) (NulOrgMprisMediaPlayer2 *object);

  gboolean  (*get_can_raise) (NulOrgMprisMediaPlayer2 *object);

  gboolean  (*get_can_set_fullscreen) (NulOrgMprisMediaPlayer2 *object);

  const gchar * (*get_desktop_entry) (NulOrgMprisMediaPlayer2 *object);

  gboolean  (*get_fullscreen) (NulOrgMprisMediaPlayer2 *object);

  gboolean  (*get_has_track_list) (NulOrgMprisMediaPlayer2 *object);

  const gchar * (*get_identity) (NulOrgMprisMediaPlayer2 *object);

  const gchar *const * (*get_supported_mime_types) (NulOrgMprisMediaPlayer2 *object);

  const gchar *const * (*get_supported_uri_schemes) (NulOrgMprisMediaPlayer2 *object);

};

GType nul_org_mpris_media_player2_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nul_org_mpris_media_player2_interface_info (void);
guint nul_org_mpris_media_player2_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void nul_org_mpris_media_player2_complete_raise (
    NulOrgMprisMediaPlayer2 *object,
    GDBusMethodInvocation *invocation);

void nul_org_mpris_media_player2_complete_quit (
    NulOrgMprisMediaPlayer2 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void nul_org_mpris_media_player2_call_raise (
    NulOrgMprisMediaPlayer2 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_org_mpris_media_player2_call_raise_finish (
    NulOrgMprisMediaPlayer2 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_org_mpris_media_player2_call_raise_sync (
    NulOrgMprisMediaPlayer2 *proxy,
    GCancellable *cancellable,
    GError **error);

void nul_org_mpris_media_player2_call_quit (
    NulOrgMprisMediaPlayer2 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean nul_org_mpris_media_player2_call_quit_finish (
    NulOrgMprisMediaPlayer2 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean nul_org_mpris_media_player2_call_quit_sync (
    NulOrgMprisMediaPlayer2 *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean nul_org_mpris_media_player2_get_can_quit (NulOrgMprisMediaPlayer2 *object);
void nul_org_mpris_media_player2_set_can_quit (NulOrgMprisMediaPlayer2 *object, gboolean value);

gboolean nul_org_mpris_media_player2_get_fullscreen (NulOrgMprisMediaPlayer2 *object);
void nul_org_mpris_media_player2_set_fullscreen (NulOrgMprisMediaPlayer2 *object, gboolean value);

gboolean nul_org_mpris_media_player2_get_can_set_fullscreen (NulOrgMprisMediaPlayer2 *object);
void nul_org_mpris_media_player2_set_can_set_fullscreen (NulOrgMprisMediaPlayer2 *object, gboolean value);

gboolean nul_org_mpris_media_player2_get_can_raise (NulOrgMprisMediaPlayer2 *object);
void nul_org_mpris_media_player2_set_can_raise (NulOrgMprisMediaPlayer2 *object, gboolean value);

gboolean nul_org_mpris_media_player2_get_has_track_list (NulOrgMprisMediaPlayer2 *object);
void nul_org_mpris_media_player2_set_has_track_list (NulOrgMprisMediaPlayer2 *object, gboolean value);

const gchar *nul_org_mpris_media_player2_get_identity (NulOrgMprisMediaPlayer2 *object);
gchar *nul_org_mpris_media_player2_dup_identity (NulOrgMprisMediaPlayer2 *object);
void nul_org_mpris_media_player2_set_identity (NulOrgMprisMediaPlayer2 *object, const gchar *value);

const gchar *nul_org_mpris_media_player2_get_desktop_entry (NulOrgMprisMediaPlayer2 *object);
gchar *nul_org_mpris_media_player2_dup_desktop_entry (NulOrgMprisMediaPlayer2 *object);
void nul_org_mpris_media_player2_set_desktop_entry (NulOrgMprisMediaPlayer2 *object, const gchar *value);

const gchar *const *nul_org_mpris_media_player2_get_supported_uri_schemes (NulOrgMprisMediaPlayer2 *object);
gchar **nul_org_mpris_media_player2_dup_supported_uri_schemes (NulOrgMprisMediaPlayer2 *object);
void nul_org_mpris_media_player2_set_supported_uri_schemes (NulOrgMprisMediaPlayer2 *object, const gchar *const *value);

const gchar *const *nul_org_mpris_media_player2_get_supported_mime_types (NulOrgMprisMediaPlayer2 *object);
gchar **nul_org_mpris_media_player2_dup_supported_mime_types (NulOrgMprisMediaPlayer2 *object);
void nul_org_mpris_media_player2_set_supported_mime_types (NulOrgMprisMediaPlayer2 *object, const gchar *const *value);


/* ---- */

#define NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PROXY (nul_org_mpris_media_player2_proxy_get_type ())
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PROXY, NulOrgMprisMediaPlayer2Proxy))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PROXY, NulOrgMprisMediaPlayer2ProxyClass))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PROXY, NulOrgMprisMediaPlayer2ProxyClass))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PROXY))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_PROXY))

typedef struct _NulOrgMprisMediaPlayer2Proxy NulOrgMprisMediaPlayer2Proxy;
typedef struct _NulOrgMprisMediaPlayer2ProxyClass NulOrgMprisMediaPlayer2ProxyClass;
typedef struct _NulOrgMprisMediaPlayer2ProxyPrivate NulOrgMprisMediaPlayer2ProxyPrivate;

struct _NulOrgMprisMediaPlayer2Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NulOrgMprisMediaPlayer2ProxyPrivate *priv;
};

struct _NulOrgMprisMediaPlayer2ProxyClass
{
  GDBusProxyClass parent_class;
};

GType nul_org_mpris_media_player2_proxy_get_type (void) G_GNUC_CONST;

void nul_org_mpris_media_player2_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NulOrgMprisMediaPlayer2 *nul_org_mpris_media_player2_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NulOrgMprisMediaPlayer2 *nul_org_mpris_media_player2_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nul_org_mpris_media_player2_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NulOrgMprisMediaPlayer2 *nul_org_mpris_media_player2_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NulOrgMprisMediaPlayer2 *nul_org_mpris_media_player2_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_SKELETON (nul_org_mpris_media_player2_skeleton_get_type ())
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_SKELETON, NulOrgMprisMediaPlayer2Skeleton))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_SKELETON, NulOrgMprisMediaPlayer2SkeletonClass))
#define NUL_ORG_MPRIS_MEDIA_PLAYER2_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_SKELETON, NulOrgMprisMediaPlayer2SkeletonClass))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_SKELETON))
#define NUL_IS_ORG_MPRIS_MEDIA_PLAYER2_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NUL_TYPE_ORG_MPRIS_MEDIA_PLAYER2_SKELETON))

typedef struct _NulOrgMprisMediaPlayer2Skeleton NulOrgMprisMediaPlayer2Skeleton;
typedef struct _NulOrgMprisMediaPlayer2SkeletonClass NulOrgMprisMediaPlayer2SkeletonClass;
typedef struct _NulOrgMprisMediaPlayer2SkeletonPrivate NulOrgMprisMediaPlayer2SkeletonPrivate;

struct _NulOrgMprisMediaPlayer2Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NulOrgMprisMediaPlayer2SkeletonPrivate *priv;
};

struct _NulOrgMprisMediaPlayer2SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nul_org_mpris_media_player2_skeleton_get_type (void) G_GNUC_CONST;

NulOrgMprisMediaPlayer2 *nul_org_mpris_media_player2_skeleton_new (void);


G_END_DECLS

#endif /* __NUL_MEDIA_PLAYER_H__ */
